// Generated by CoffeeScript 1.7.1
(function() {
  var BubbleChart, clean_box_office_data, root,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  BubbleChart = (function() {
    function BubbleChart(data) {
      this.hide_details = __bind(this.hide_details, this);
      this.show_details = __bind(this.show_details, this);
      this.hide_years = __bind(this.hide_years, this);
      this.display_years = __bind(this.display_years, this);
      this.move_towards_year = __bind(this.move_towards_year, this);
      this.display_by_year = __bind(this.display_by_year, this);
      this.hide_ratings = __bind(this.hide_ratings, this);
      this.display_ratings = __bind(this.display_ratings, this);
      this.move_towards_rating = __bind(this.move_towards_rating, this);
      this.display_by_rating = __bind(this.display_by_rating, this);
      this.move_towards_center = __bind(this.move_towards_center, this);
      this.display_group_all = __bind(this.display_group_all, this);
      this.start = __bind(this.start, this);
      this.create_vis = __bind(this.create_vis, this);
      this.create_nodes = __bind(this.create_nodes, this);
      this.create_legend = __bind(this.create_legend, this);
      this.remove_legend = __bind(this.remove_legend, this);
      var max_amount;
      this.data = data;
      this.width = 1280;
      this.height = 800;
      this.tooltip = CustomTooltip("gates_tooltip", 240);
      this.center = {
        x: this.width / 2,
        y: this.height / 2
      };
      this.year_centers = {
        "2006": {
          x: this.width / 5 + 80,
          y: this.height / 2
        },
        "2007": {
          x: 2 * this.width / 6 + 40,
          y: this.height / 2
        },
        "2008": {
          x: this.width / 2,
          y: this.height / 2
        },
        "2009": {
          x: 4 * this.width / 6 - 40,
          y: this.height / 2
        },
        "2010": {
          x: 5 * this.width / 6 - 128,
          y: this.height / 2
        }
      };
      this.rated_centers = {
        "G": {
          x: this.width / 5 + 80,
          y: this.height / 2
        },
        "PG": {
          x: 2 * this.width / 6 + 40,
          y: this.height / 2
        },
        "PG-13": {
          x: this.width / 2,
          y: this.height / 2
        },
        "R": {
          x: 4 * this.width / 6 - 40,
          y: this.height / 2
        },
        "NC-17": {
          x: 5 * this.width / 6 - 128,
          y: this.height / 2
        },
        "Not Rated": {
          x: 5 * this.width / 6 - 128,
          y: this.height / 2
        },
        "Unrated": {
          x: 5 * this.width / 6 - 128,
          y: this.height / 2
        },
        "N/A": {
          x: 5 * this.width / 6 - 128,
          y: this.height / 2
        }
      };
      this.layout_gravity = -0.01;
      this.damper = 0.1;
      this.vis = null;
      this.nodes = [];
      this.force = null;
      this.circles = null;
      this.fill_color = d3.scale.ordinal().domain(["G", "PG", "PG-13", "R", "NC-17", "Not Rated", "Unrated", "N/A"]).range(["#3b45cc", "#7aa25c", "#d3d92b", "#d84b2a", "#a36a70", "#a36a70", "#a36a70", "#7f8074" ]);
      max_amount = d3.max(this.data, (function(_this) {
        return function(d) {
          return clean_box_office_data(d.BoxOffice);
        };
      })(this));
      this.radius_scale = d3.scale.pow().exponent(0.5).domain([0, max_amount]).range([2, 20]);
      this.create_nodes();
      this.create_vis();
      this.create_legend();
    }

    BubbleChart.prototype.create_nodes = function() {
      this.data.forEach((function(_this) {
        return function(d) {
          var boxOfficeData, node;
          boxOfficeData = clean_box_office_data(d.BoxOffice);
          node = {
            id: d.imdbID,
            radius: _this.radius_scale(boxOfficeData),
            value: boxOfficeData,
            name: d.Title,
            rated: d.Rated,
            year: d.Year,
            poster: d.Poster,
            actors: d.Actors,
            website: d.Website,
            score:   d.Metascore,
            x: Math.random() * 900,
            y: Math.random() * 800
          };
          return _this.nodes.push(node);
        };
      })(this));
      return this.nodes.sort(function(a, b) {
        return b.value - a.value;
      });
    };

    BubbleChart.prototype.create_vis = function() {
      var that;
      this.vis = d3.select("#vis").append("svg").attr("width", this.width).attr("height", this.height).attr("id", "svg_vis");
      this.circles = this.vis.selectAll("circle").data(this.nodes, function(d) {
        return d.id;
      });
      that = this;
      this.circles.enter().append("circle").attr("r", 0).attr("fill", (function(_this) {
        return function(d) {
          return _this.fill_color(d.rated);
        };
      })(this)).attr("stroke-width", 2).attr("stroke", (function(_this) {
        return function(d) {
          return d3.rgb(_this.fill_color(d.rated)).darker();
        };
      })(this)).attr("id", function(d) {
        return "bubble_" + d.id;
      }).on("mouseover", function(d, i) {
        return that.show_details(d, i, this);
      }).on("mouseout", function(d, i) {
        return that.hide_details(d, i, this);
      }).on("click", function(d, i) {
        return that.open_website(d, i, this);
      });
      return this.circles.transition().duration(2000).attr("r", function(d) {
        return d.radius;
      });
    };


    BubbleChart.prototype.create_legend = function () {
      this.vis.append("text")
        .attr("class", "legend")
        .attr("x", 1205)
        .attr("y", 350)
        .attr("dy", "5em")
        .style("text-anchor","middle")
        .text("Color and Size Legend");
      var legendData = [{rated: "G", legend_value: "500", x: "", y: ""}, {rated: "PG", legend_value: "250", x: "", y: ""}, {rated: "PG-13", legend_value: "100", x: "", y: ""}, {rated: "R", legend_value: "50", x: "", y: ""}, {rated: "NR", legend_value: "25", x: "", y: ""}, {rated: "N/A", legend_value: "5", x: "", y: ""}];
      var legend = this.vis.append("g")
        .selectAll(".legend")
        .attr("class", "legend")
        .data(legendData)
        .enter()
        .append("g")
        .attr("transform", function (d, i) { 
          d.x = 600;
          d.y = 200 + i * 20 + 40;
          return "translate(" + d.x + "," + d.y + ")"; });
      legend.append("circle")
        .attr("class", "legend")
        .attr("cx", function (d) { return d.x;})
        .attr("cy", function (d) { return d.y;})
        .attr("r", function (d) 
            {
              scale = d3.scale.pow().exponent(0.5).domain([0, 533.0]).range([2, 40]);
              return scale(d.legend_value);
            }
        )
        .style("position", "fixed")
        .style("fill", function (d) 
            {
              legend_color = d3.scale.ordinal().domain(["G", "PG", "PG-13", "R", "NC-17", "Not Rated", "Not Rated", "N/A"]).range(["#3b45cc", "#7aa25c", "#d3d92b", "#d84b2a", "#a36a70", "#a36a70", "#a36a70", "#7f8074" ]);
              return legend_color(d.rated);
            }
        );
      legend.append("text")
        .attr("class", "legend")
        .attr("x", function (d) { return d.x - 50;})
        .attr("y", function (d) { return d.y;})
        .attr("dy", ".35em")
        .style("text-anchor","middle")
        .text(function (d) { return d.rated; });
      legend.append("text")
        .attr("class", "legend")
        .attr("x", function (d) { return d.x + 80;})
        .attr("y", function (d) { return d.y;})
        .attr("dy", ".35em")
        .style("text-anchor","end")
        .text( function (d) 
          {
            return "$" + d.legend_value + "M";
          }
        );
    }

    BubbleChart.prototype.remove_legend = function () {
      this.vis.selectAll(".legend").remove();
    }

    BubbleChart.prototype.charge = function(d) {
      return -Math.pow(d.radius, 2.0) / 8;
    };

    BubbleChart.prototype.start = function() {
      return this.force = d3.layout.force().nodes(this.nodes).size([this.width, this.height]);
    };

    BubbleChart.prototype.display_group_all = function() {
      this.force.gravity(this.layout_gravity).charge(this.charge).friction(0.9).on("tick", (function(_this) {
        return function(e) {
          return _this.circles.each(_this.move_towards_center(e.alpha)).attr("cx", function(d) {
            return d.x;
          }).attr("cy", function(d) {
            return d.y;
          });
        };
      })(this));
      this.force.start();
      return this.cleanup("group");
    };

    BubbleChart.prototype.move_towards_center = function(alpha) {
      return (function(_this) {
        return function(d) {
          d.x = d.x + (_this.center.x - d.x) * (_this.damper + 0.02) * alpha;
          return d.y = d.y + (_this.center.y - d.y) * (_this.damper + 0.02) * alpha;
        };
      })(this);
    };

    BubbleChart.prototype.display_by_year = function() {
      console.log('year');
      this.force.gravity(this.layout_gravity).charge(this.charge).friction(0.9).on("tick", (function(_this) {
        return function(e) {
          return _this.circles.each(_this.move_towards_year(e.alpha)).attr("cx", function(d) {
            return d.x;
          }).attr("cy", function(d) {
            return d.y;
          });
        };
      })(this));
      this.force.start();
      return this.display_years();
    };

    BubbleChart.prototype.move_towards_year = function(alpha) {
      return (function(_this) {
        return function(d) {
          var target;
          target = _this.year_centers[d.year];
          d.x = d.x + (target.x - d.x) * (_this.damper + 0.02) * alpha * 1.1;
          return d.y = d.y + (target.y - d.y) * (_this.damper + 0.02) * alpha * 1.1;
        };
      })(this);
    };

    BubbleChart.prototype.display_years = function() {
      this.cleanup("years")
      var years, years_data, years_x;
      years_x = {
        "2006": 120,
        "2007": 380,
        "2008": this.width / 2,
        "2009": 900,
        "2010": 1160
      };
      years_data = d3.keys(years_x);
      years = this.vis.selectAll(".years").data(years_data);
      return years.enter().append("text").attr("class", "years").attr("x", (function(_this) {
        return function(d) {
          return years_x[d];
        };
      })(this)).attr("y", 40).attr("text-anchor", "middle").text(function(d) {
        return d;
      });
    };

    BubbleChart.prototype.hide_years = function() {
      var years;
      return years = this.vis.selectAll(".years").remove();
    };

    BubbleChart.prototype.display_by_rating = function() {
      this.force.gravity(this.layout_gravity).charge(this.charge).friction(0.9).on("tick", (function(_this) {
        return function(e) {
          return _this.circles.each(_this.move_towards_ratings(e.alpha)).attr("cx", function(d) {
            return d.x;
          }).attr("cy", function(d) {
            return d.y;
          });
        };
      })(this));
      this.force.start();
      return this.display_ratings();
    };

    BubbleChart.prototype.move_towards_ratings = function(alpha) {
      return (function(_this) {
        return function(d) {
          var target;
          target = _this.rated_centers[d.rated];
          d.x = d.x + (target.x - d.x) * (_this.damper + 0.02) * alpha * 1.1;
          return d.y = d.y + (target.y - d.y) * (_this.damper + 0.02) * alpha * 1.1;
        };
      })(this);
    };

    BubbleChart.prototype.display_ratings = function() {
      this.cleanup("ratings")
      var ratings, ratings_data, ratings_x;
      ratings_x = {
        "G": 80,
        "PG": 260,
        "PG-13": this.width / 2 - 20,
        "R": 1000,
        "NR": 1220
      };
      ratings_data = d3.keys(ratings_x);
      ratings = this.vis.selectAll(".ratings").data(ratings_data);
      return ratings.enter().append("text").attr("class", "ratings").attr("x", (function(_this) {
        return function(d) {
          return ratings_x[d];
        };
      })(this)).attr("y", 40).attr("text-anchor", "middle").text(function(d) {
        return d;
      });
    };


    BubbleChart.prototype.hide_ratings = function() {
      var ratings;
      return ratings = this.vis.selectAll(".ratings").remove();
    };

    
    //display the movie nodes by their score
     BubbleChart.prototype.display_by_score = function() {
      this.force.gravity(this.layout_gravity).charge(this.charge).friction(0.9).on("tick", (function(_this) {
        return function(e) {
          return _this.circles.each(_this.move_towards_score(e.alpha)).attr("cx", function(d) {
            return d.x;
          }).attr("cy", function(d) {
            return d.y;
          });
        };
      })(this));
      this.force.start();
      return this.display_ratings();
    };

    BubbleChart.prototype.move_towards_score = function(alpha) {
      var scale = d3.scale.linear().domain([0,100]).range([500,300]);

      return (function(_this) {
        return function(d) {
          var target = _this.rated_centers[d.rated];
          updatedy = target.y
          updatedy = scale(d.score);
          d.x = d.x + (target.x - d.x) * (_this.damper + 0.02) * alpha * 1.1;
          return d.y = d.y + (updatedy - d.y) * (_this.damper + 0.02) * alpha * 1.1;
        };
      })(this);
    };




    BubbleChart.prototype.cleanup = function(newvis) {
      if(newvis === "years") {
        this.remove_legend();
        return this.hide_ratings();
      }else if(newvis === "ratings") {
        this.remove_legend();
        return this.hide_years();
      } else {
        var ratings,years;
        ratings = this.vis.selectAll(".ratings").remove();
        years = this.vis.selectAll(".years").remove();
        return this.create_legend();
      }
    };

    BubbleChart.prototype.open_website = function(data, i, element) {
      console.log(data);
      if(data.website !== "N/A") {
        return popitup(data.website);
      } else {
        return;
      }
    };

    BubbleChart.prototype.show_details = function(data, i, element) {
      var content;
      console.log(data);
      d3.select(element).attr("stroke", "black");
      content = "<span class=\"name\">Title:</span><span class=\"value\"> " + data.name + "</span><br/>";
      content += "<span class=\"name\">Amount:</span><span class=\"value\"> $" + data.value + "M</span><br/>";
      content += "<span class=\"name\">Year:</span><span class=\"value\"> " + data.year + "</span><br />";
      content += "<span class=\"name\">Actors</span><span class=\"value\"> " + data.actors + "</span>";
      return this.tooltip.showTooltip(content, d3.event);
    };

    BubbleChart.prototype.hide_details = function(data, i, element) {
      d3.select(element).attr("stroke", (function(_this) {
        return function(d) {
          return d3.rgb(_this.fill_color(d.group)).darker();
        };
      })(this));
      return this.tooltip.hideTooltip();
    };

    return BubbleChart;

  })();

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  $(function() {
    var chart, render_vis;
    chart = null;
    render_vis = function(json) {
      chart = new BubbleChart(json);
      chart.start();
      return root.display_all();
    };
    root.display_all = (function(_this) {
      return function() {
        return chart.display_group_all();
      };
    })(this);
    root.display_year = (function(_this) {
      return function() {
        return chart.display_by_year();
      };
    })(this);
    root.display_ratings = (function(_this) {
      return function() {
        return chart.display_by_rating();
      };
    })(this);
    root.display_score = (function(_this) {
      return function() {
        return chart.display_by_score();
      };
    })(this);
    
    root.toggle_view = (function(_this) {
      return function(view_type) {
        
        

        if (view_type === 'year') {
          return root.display_year();
        }else if (view_type === 'rating') {
          return root.display_ratings();
        }else if (view_type == 'score'){
          return root.display_score();
        }else {
          return root.display_all();
        }
      };
    })(this);
    return d3.json("raw_all.json", render_vis);
  });

  clean_box_office_data = function(data) {
    if (data === "N/A" || typeof data !== "string") {
      return 1;
    } else {
      return data.substring(1, data.length - 1);
    }
  };

  popitup = function(url) {
    newwindow=window.open(url,'name','height=300,width=300, location=0');
    if (window.focus) {newwindow.focus()}
    return false;
  }

}).call(this);
